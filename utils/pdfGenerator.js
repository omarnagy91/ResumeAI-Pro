// PDF Generation utility for ResumeAI Pro
// Handles professional PDF creation with ATS-optimized formatting

class PDFGenerator {
    constructor() {
        this.template = this.getDefaultTemplate();
    }

    getDefaultTemplate() {
        return {
            fontFamily: 'Arial, sans-serif',
            fontSize: '11pt',
            lineHeight: '1.2',
            margins: {
                top: '0.75in',
                right: '0.75in',
                bottom: '0.75in',
                left: '0.75in'
            },
            colors: {
                primary: '#333333',
                secondary: '#666666',
                accent: '#2c5aa0'
            }
        };
    }

    generatePDF(resumeData, jobData) {
        const html = this.generateHTML(resumeData, jobData);
        return this.convertToPDF(html);
    }

    generateHTML(resumeData, jobData) {
        const { content, atsScore } = resumeData;
        const { title, company } = jobData;

        return `
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>Resume - ${title} at ${company}</title>
    <style>
        ${this.getCSS()}
    </style>
</head>
<body>
    <div class="resume-container">
        <header class="resume-header">
            <h1 class="candidate-name">${this.extractName(content)}</h1>
            <div class="contact-info">
                ${this.extractContactInfo(content)}
            </div>
        </header>
        
        <main class="resume-content">
            ${this.formatResumeContent(content)}
        </main>
        
        <footer class="resume-footer">
            <div class="ats-score">
                ATS Compatibility Score: ${atsScore.score}%
            </div>
            <div class="generation-info">
                Generated by ResumeAI Pro - ${new Date().toLocaleDateString()}
            </div>
        </footer>
    </div>
</body>
</html>`;
    }

    getCSS() {
        return `
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: ${this.template.fontFamily};
            font-size: ${this.template.fontSize};
            line-height: ${this.template.lineHeight};
            color: ${this.template.colors.primary};
            background: white;
        }
        
        .resume-container {
            max-width: 8.5in;
            margin: 0 auto;
            padding: ${this.template.margins.top} ${this.template.margins.right} ${this.template.margins.bottom} ${this.template.margins.left};
        }
        
        .resume-header {
            text-align: center;
            margin-bottom: 30px;
            border-bottom: 2px solid ${this.template.colors.accent};
            padding-bottom: 20px;
        }
        
        .candidate-name {
            font-size: 24pt;
            font-weight: bold;
            color: ${this.template.colors.accent};
            margin-bottom: 10px;
        }
        
        .contact-info {
            font-size: 10pt;
            color: ${this.template.colors.secondary};
        }
        
        .contact-info span {
            margin: 0 10px;
        }
        
        .resume-content {
            margin-bottom: 30px;
        }
        
        .section {
            margin-bottom: 25px;
        }
        
        .section-title {
            font-size: 14pt;
            font-weight: bold;
            color: ${this.template.colors.accent};
            text-transform: uppercase;
            border-bottom: 1px solid ${this.template.colors.accent};
            margin-bottom: 15px;
            padding-bottom: 5px;
        }
        
        .experience-item, .education-item {
            margin-bottom: 20px;
        }
        
        .item-header {
            display: flex;
            justify-content: space-between;
            align-items: baseline;
            margin-bottom: 5px;
        }
        
        .item-title {
            font-weight: bold;
            font-size: 12pt;
        }
        
        .item-company, .item-institution {
            font-weight: bold;
            color: ${this.template.colors.accent};
        }
        
        .item-date {
            font-style: italic;
            color: ${this.template.colors.secondary};
        }
        
        .item-location {
            color: ${this.template.colors.secondary};
            font-size: 10pt;
        }
        
        .item-description {
            margin-top: 8px;
            text-align: justify;
        }
        
        .item-description ul {
            margin-left: 20px;
        }
        
        .item-description li {
            margin-bottom: 3px;
        }
        
        .skills-list {
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
        }
        
        .skill-tag {
            background: ${this.template.colors.accent};
            color: white;
            padding: 4px 8px;
            border-radius: 3px;
            font-size: 10pt;
        }
        
        .resume-footer {
            margin-top: 40px;
            padding-top: 20px;
            border-top: 1px solid #ddd;
            font-size: 9pt;
            color: ${this.template.colors.secondary};
            text-align: center;
        }
        
        .ats-score {
            font-weight: bold;
            color: ${atsScore.score >= 90 ? '#28a745' : atsScore.score >= 80 ? '#ffc107' : '#dc3545'};
        }
        
        @media print {
            body {
                -webkit-print-color-adjust: exact;
                print-color-adjust: exact;
            }
        }
        `;
    }

    extractName(content) {
        // Extract name from resume content (first line or header)
        const lines = content.split('\n');
        const firstLine = lines[0].trim();
        return firstLine || 'Your Name';
    }

    extractContactInfo(content) {
        // Extract contact information from resume content
        const emailMatch = content.match(/([a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,})/);
        const phoneMatch = content.match(/(\+?1?[-.\s]?\(?[0-9]{3}\)?[-.\s]?[0-9]{3}[-.\s]?[0-9]{4})/);
        const linkedinMatch = content.match(/(linkedin\.com\/in\/[a-zA-Z0-9-]+)/i);

        let contactInfo = '';

        if (emailMatch) contactInfo += `<span>${emailMatch[1]}</span>`;
        if (phoneMatch) contactInfo += `<span>${phoneMatch[1]}</span>`;
        if (linkedinMatch) contactInfo += `<span>${linkedinMatch[1]}</span>`;

        return contactInfo || '<span>Your Email | Your Phone | Your LinkedIn</span>';
    }

    formatResumeContent(content) {
        // Parse and format resume content into structured sections
        const sections = this.parseResumeSections(content);
        let html = '';

        for (const [sectionName, sectionContent] of Object.entries(sections)) {
            html += this.formatSection(sectionName, sectionContent);
        }

        return html;
    }

    parseResumeSections(content) {
        const sections = {};
        const lines = content.split('\n');
        let currentSection = 'Summary';
        let currentContent = [];

        for (const line of lines) {
            const trimmedLine = line.trim();

            if (this.isSectionHeader(trimmedLine)) {
                if (currentContent.length > 0) {
                    sections[currentSection] = currentContent.join('\n');
                }
                currentSection = this.normalizeSectionName(trimmedLine);
                currentContent = [];
            } else if (trimmedLine) {
                currentContent.push(trimmedLine);
            }
        }

        if (currentContent.length > 0) {
            sections[currentSection] = currentContent.join('\n');
        }

        return sections;
    }

    isSectionHeader(line) {
        const sectionKeywords = [
            'experience', 'work experience', 'employment', 'professional experience',
            'education', 'academic background', 'qualifications',
            'skills', 'technical skills', 'core competencies',
            'projects', 'portfolio', 'key projects',
            'certifications', 'licenses', 'credentials',
            'summary', 'profile', 'objective', 'about',
            'achievements', 'accomplishments', 'awards'
        ];

        const lowerLine = line.toLowerCase();
        return sectionKeywords.some(keyword => lowerLine.includes(keyword)) &&
            line.length < 50 &&
            !line.includes('.') &&
            !line.includes(',');
    }

    normalizeSectionName(header) {
        const lowerHeader = header.toLowerCase();

        if (lowerHeader.includes('experience') || lowerHeader.includes('employment')) {
            return 'Professional Experience';
        } else if (lowerHeader.includes('education') || lowerHeader.includes('academic')) {
            return 'Education';
        } else if (lowerHeader.includes('skill')) {
            return 'Skills';
        } else if (lowerHeader.includes('project')) {
            return 'Projects';
        } else if (lowerHeader.includes('certification') || lowerHeader.includes('license')) {
            return 'Certifications';
        } else if (lowerHeader.includes('summary') || lowerHeader.includes('profile') || lowerHeader.includes('objective')) {
            return 'Professional Summary';
        } else if (lowerHeader.includes('achievement') || lowerHeader.includes('accomplishment')) {
            return 'Achievements';
        }

        return header;
    }

    formatSection(sectionName, content) {
        let html = `<div class="section">
            <h2 class="section-title">${sectionName}</h2>
            <div class="section-content">`;

        if (sectionName === 'Skills') {
            html += this.formatSkillsSection(content);
        } else if (sectionName === 'Professional Experience' || sectionName === 'Education') {
            html += this.formatExperienceSection(content);
        } else {
            html += this.formatTextSection(content);
        }

        html += `</div></div>`;
        return html;
    }

    formatSkillsSection(content) {
        const skills = content.split(/[,;•\n]/).map(skill => skill.trim()).filter(skill => skill);
        return `<div class="skills-list">
            ${skills.map(skill => `<span class="skill-tag">${skill}</span>`).join('')}
        </div>`;
    }

    formatExperienceSection(content) {
        const items = content.split(/\n(?=[A-Z])/).filter(item => item.trim());
        return items.map(item => this.formatExperienceItem(item)).join('');
    }

    formatExperienceItem(item) {
        const lines = item.split('\n').filter(line => line.trim());
        if (lines.length === 0) return '';

        const firstLine = lines[0];
        const description = lines.slice(1).join('\n');

        return `<div class="experience-item">
            <div class="item-header">
                <div class="item-title">${firstLine}</div>
            </div>
            <div class="item-description">${this.formatDescription(description)}</div>
        </div>`;
    }

    formatTextSection(content) {
        return `<div class="text-content">${content.replace(/\n/g, '<br>')}</div>`;
    }

    formatDescription(description) {
        // Convert bullet points and formatting
        return description
            .replace(/^[-•]\s*/gm, '• ')
            .replace(/\n/g, '<br>')
            .replace(/•/g, '&bull;');
    }

    async convertToPDF(html) {
        // This would integrate with a PDF generation service
        // For now, we'll return the HTML for browser-based PDF generation
        return {
            html: html,
            blob: await this.htmlToBlob(html)
        };
    }

    async htmlToBlob(html) {
        const blob = new Blob([html], { type: 'text/html' });
        return blob;
    }
}

// Export for use in other modules
if (typeof module !== 'undefined' && module.exports) {
    module.exports = PDFGenerator;
}
